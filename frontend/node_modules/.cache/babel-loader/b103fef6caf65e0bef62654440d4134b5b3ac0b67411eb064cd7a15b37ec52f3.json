{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rache\\\\react-projects\\\\smart-task-and-habit-tracker\\\\frontend\\\\src\\\\components\\\\Schedule\\\\SchedulePlanner.js\",\n  _s = $RefreshSig$();\n// SchedulePlanner.js\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\nimport \"./SchedulePlanner.css\";\nimport \"../Dashboard.css\";\nimport StatisticsPanel from \"./StatisticsPanel\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst timeBlocks = {\n  morning: [6, 7, 8, 9, 10, 11],\n  afternoon: [12, 13, 14, 15, 16, 17],\n  evening: [18, 19, 20, 21, 22, 23]\n};\nfunction getPreferredHours(preferredTime) {\n  if (!preferredTime) return [];\n  if (preferredTime.includes(\":\")) {\n    const hour = parseInt(preferredTime.split(\":\")[0], 10);\n    return [hour];\n  }\n  const block = timeBlocks[preferredTime.toLowerCase()];\n  return block || [];\n}\nfunction removeCompletion(type, id) {\n  const key = type === \"task\" ? \"taskCompletions\" : \"habitCompletions\";\n  const raw = localStorage.getItem(key);\n  if (!raw) return;\n  const data = JSON.parse(raw);\n  const updated = data.filter(entry => {\n    if (type === \"task\") return entry.taskId !== id;else return entry.cloneId !== id;\n  });\n  localStorage.setItem(key, JSON.stringify(updated));\n  window.dispatchEvent(new Event(\"storage-updated\"));\n}\nconst allDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nfunction getDaysFromFrequency(freq) {\n  if (!freq) return [];\n  if (freq === \"Daily\") return allDays;\n  if (freq.includes(\",\")) {\n    return freq.split(\",\").map(day => {\n      switch (day.trim().toLowerCase()) {\n        case \"mon\":\n          return \"Monday\";\n        case \"tue\":\n          return \"Tuesday\";\n        case \"wed\":\n          return \"Wednesday\";\n        case \"thu\":\n          return \"Thursday\";\n        case \"fri\":\n          return \"Friday\";\n        case \"sat\":\n          return \"Saturday\";\n        case \"sun\":\n          return \"Sunday\";\n        default:\n          return null;\n      }\n    }).filter(Boolean);\n  }\n  const match = freq.match(/Every (\\d+) days/);\n  if (match) {\n    const step = parseInt(match[1], 10);\n    return allDays.filter((_, idx) => idx % step === 0);\n  }\n  return [];\n}\nfunction autoPlaceHabits(habits, currentSchedule, tasks, setHabitClones) {\n  const newSchedule = {\n    ...currentSchedule\n  };\n  const newClones = [];\n  habits.forEach(habit => {\n    if (!habit.frequency || !habit.preferredTime) return;\n    const candidateDays = getDaysFromFrequency(habit.frequency);\n    const candidateHours = getPreferredHours(habit.preferredTime);\n    candidateDays.forEach(day => {\n      let placed = false;\n      for (const hour of candidateHours) {\n        if (placed) break;\n        const slotKey = `${day}-${hour}:00`;\n        const alreadyHasClone = (newSchedule[slotKey] || []).some(id => id.startsWith(`habit-${habit.id}-clone`));\n        if (!alreadyHasClone) {\n          const cloneId = `habit-${habit.id}-clone-${Date.now()}-${Math.random().toString(36).slice(2)}`;\n          if (!newSchedule[slotKey]) newSchedule[slotKey] = [];\n          newSchedule[slotKey].push(cloneId);\n          localStorage.setItem(\"scheduledItems\", JSON.stringify([...JSON.parse(localStorage.getItem(\"scheduledItems\") || \"[]\"), {\n            id: cloneId,\n            type: \"habit\",\n            scheduledAt: new Date().toISOString()\n          }]));\n          window.dispatchEvent(new Event(\"storage-updated\"));\n          newClones.push({\n            id: cloneId,\n            habitId: habit.id\n          });\n          placed = true;\n        }\n      }\n    });\n  });\n  setHabitClones(prev => [...prev, ...newClones]);\n  return newSchedule;\n}\nfunction syncScheduleFromTasks(tasks) {\n  const newSchedule = {};\n  tasks.forEach(task => {\n    if (task.scheduledTime) {\n      if (!newSchedule[task.scheduledTime]) newSchedule[task.scheduledTime] = [];\n      newSchedule[task.scheduledTime].push(String(task.id));\n    }\n  });\n  return newSchedule;\n}\nfunction mergeScheduledTasks(savedSchedule, updatedTasks) {\n  const updatedSchedule = syncScheduleFromTasks(updatedTasks);\n  const merged = {\n    ...savedSchedule\n  };\n\n  // Remove any task IDs from the old schedule if they were updated\n  const updatedTaskIds = updatedTasks.filter(t => t.scheduledTime).map(t => String(t.id));\n\n  // Remove any outdated placements of updated tasks\n  Object.keys(merged).forEach(slot => {\n    merged[slot] = merged[slot].filter(id => !updatedTaskIds.includes(id));\n    if (merged[slot].length === 0) {\n      delete merged[slot];\n    }\n  });\n\n  // Now apply the fresh placements from updated tasks\n  Object.entries(updatedSchedule).forEach(([slot, ids]) => {\n    if (!merged[slot]) merged[slot] = [];\n    merged[slot].push(...ids);\n  });\n  return merged;\n}\nfunction updateScheduledCount(id, type, action) {\n  const key = \"scheduledItems\";\n  const stored = JSON.parse(localStorage.getItem(key) || \"[]\");\n  let updated;\n  if (action === \"add\") {\n    const alreadyExists = stored.some(entry => entry.id === id);\n    if (!alreadyExists) {\n      updated = [...stored, {\n        id,\n        type,\n        scheduledAt: new Date().toISOString()\n      }];\n    } else {\n      updated = stored; // no change\n    }\n  } else if (action === \"remove\") {\n    updated = stored.filter(item => item.id !== id);\n  }\n  localStorage.setItem(key, JSON.stringify(updated));\n  window.dispatchEvent(new Event(\"storage-updated\")); // Trigger stats refresh\n}\nexport default function SchedulePlanner() {\n  _s();\n  var _location$state, _location$state2;\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [tasks, setTasks] = useState(((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.tasks) || []);\n  const [habits, setHabits] = useState(((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.habits) || []);\n  const [scheduledTasks, setScheduledTasks] = useState({});\n  const [habitClones, setHabitClones] = useState([]); // [{ id: 'habit-1-copy-1', habitId: 1 }]\n  const [showSaveModal, setShowSaveModal] = useState(false);\n  const [completedHabitIds, setCompletedHabitIds] = useState(() => {\n    const stored = JSON.parse(localStorage.getItem(\"habitCompletions\") || \"[]\");\n    return stored.map(entry => entry.cloneId); // Use cloneId, not habitId\n  });\n  const saveSchedule = () => {\n    const scheduleData = {\n      scheduledTasks,\n      habitClones\n    };\n    console.log(\"📦 Saving schedule:\", scheduleData);\n    localStorage.setItem(\"savedSchedule\", JSON.stringify(scheduleData));\n    alert(\"✅ Schedule saved locally!\");\n  };\n  const handleAutoPlace = () => {\n    const updatedSchedule = autoPlaceHabits(habits, scheduledTasks, tasks, setHabitClones);\n    setScheduledTasks(updatedSchedule);\n  };\n  const [hourStart, setHourStart] = useState(() => {\n    return parseInt(localStorage.getItem(\"startHour\")) || 6;\n  });\n  const [hourEnd, setHourEnd] = useState(() => {\n    return parseInt(localStorage.getItem(\"endHour\")) || 22;\n  });\n  const hours = Array.from({\n    length: hourEnd - hourStart + 1\n  }, (_, i) => i + hourStart);\n  const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  useEffect(() => {\n    document.documentElement.style.setProperty('--row-count', hourEnd - hourStart + 1);\n  }, [hourStart, hourEnd]);\n  useEffect(() => {\n    const userId = localStorage.getItem(\"userId\");\n    if (!userId) return;\n    const token = localStorage.getItem(\"token\");\n    fetch(`http://localhost:8080/api/users/${userId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(res => res.json()).then(async userData => {\n      var _location$state4;\n      const taskDetails = await Promise.all((userData.taskIds || []).map(id => fetch(`http://localhost:8080/api/tasks/${id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }).then(res => res.json())));\n      setTasks(taskDetails);\n      setScheduledTasks(syncScheduleFromTasks(taskDetails));\n      const habitDetails = await Promise.all((userData.habitIds || []).map(id => fetch(`http://localhost:8080/api/habits/${id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }).then(res => res.json())));\n      setHabits(habitDetails);\n      const saved = localStorage.getItem(\"savedSchedule\");\n      if (saved) {\n        var _location$state3;\n        const parsed = JSON.parse(saved);\n\n        // If tasks exist in location.state, merge them with saved schedule\n        if ((_location$state3 = location.state) !== null && _location$state3 !== void 0 && _location$state3.tasks) {\n          const merged = mergeScheduledTasks(parsed.scheduledTasks || {}, location.state.tasks);\n          setScheduledTasks(merged);\n        } else {\n          // Use saved schedule as-is\n          setScheduledTasks(parsed.scheduledTasks || {});\n        }\n        if (parsed.habitClones) {\n          setHabitClones(parsed.habitClones);\n        }\n      } else if ((_location$state4 = location.state) !== null && _location$state4 !== void 0 && _location$state4.tasks) {\n        setScheduledTasks(syncScheduleFromTasks(location.state.tasks));\n      } else {\n        // fallback: construct schedule from taskDetails\n        const fallbackSchedule = syncScheduleFromTasks(taskDetails);\n        setScheduledTasks(fallbackSchedule);\n      }\n    }).catch(err => console.error(\"Failed to load tasks and habits:\", err));\n  }, []);\n\n  // const onDragEnd = (result) => {\n  //   const { destination, draggableId } = result;\n  //   if (!destination) return;\n\n  //   const itemsInDest = scheduledTasks[destination.droppableId] || [];\n  //   const habitIdPrefix = draggableId.startsWith(\"habit-\") ? draggableId.split(\"-copy\")[0] : draggableId;\n\n  //   if (itemsInDest.some(id => id === habitIdPrefix || id.startsWith(`${habitIdPrefix}-copy`))) {\n  //     // Block duplicate placement\n  //     return;\n  //   }\n  //   setScheduledTasks((prev) => {\n  //     const updated = { ...prev };\n\n  //     // Remove the dragged item from any previous slot\n  //     Object.keys(updated).forEach((slot) => {\n  //       const items = Array.isArray(updated[slot]) ? updated[slot] : [updated[slot]];\n  //       if (items.includes(draggableId)) {\n  //         updated[slot] = items.filter((id) => id !== draggableId);\n  //       }\n  //     });\n\n  //     const slotItems = updated[destination.droppableId] || [];\n  //     const currentValues = Array.isArray(slotItems) ? slotItems : [slotItems];\n  //     updated[destination.droppableId] = [...currentValues, draggableId];\n  //     updateScheduledCount(draggableId, draggableId.startsWith(\"habit-\") ? \"habit\" : \"task\", \"add\");\n\n  //     if (!draggableId.startsWith(\"habit-\")) {\n  //       fetch(`http://localhost:8080/api/tasks/${draggableId}/schedule`, {\n  //         method: \"PUT\",\n  //         headers: {\n  //           \"Content-Type\": \"application/json\",\n  //           \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n  //         },\n  //         body: JSON.stringify({ scheduledTime: destination.droppableId }),\n  //       })\n  //         .then((res) => res.json())\n  //         .then((data) => console.log(\"✅ Scheduled:\", data))\n  //         .catch((err) => console.error(\"❌ Error scheduling task:\", err));\n  //     }\n\n  //     return updated;\n  //   });\n  // };\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n    if (!destination) return;\n\n    // 💡 Dragging a habit from the sidebar (original list)\n    if (source.droppableId === \"habitList\" && draggableId.startsWith(\"habit-\")) {\n      const habitId = draggableId.replace(\"habit-\", \"\");\n      const cloneId = `habit-${habitId}-clone-${Date.now()}-${Math.random().toString(36).substring(2)}`;\n\n      // Add to habit clones\n      setHabitClones(prev => [...prev, {\n        id: cloneId,\n        habitId\n      }]);\n\n      // Add to schedule\n      setScheduledTasks(prev => {\n        const updated = {\n          ...prev\n        };\n        const slotItems = updated[destination.droppableId] || [];\n        updated[destination.droppableId] = [...slotItems, cloneId];\n        return updated;\n      });\n\n      // Update localStorage\n      const scheduled = JSON.parse(localStorage.getItem(\"scheduledItems\") || \"[]\");\n      scheduled.push({\n        id: cloneId,\n        type: \"habit\",\n        scheduledAt: new Date().toISOString()\n      });\n      localStorage.setItem(\"scheduledItems\", JSON.stringify(scheduled));\n      window.dispatchEvent(new Event(\"storage-updated\"));\n      return;\n    }\n\n    // 💡 Regular task or already-scheduled clone/habit move\n    const itemsInDest = scheduledTasks[destination.droppableId] || [];\n    const habitIdPrefix = draggableId.startsWith(\"habit-\") ? draggableId.split(\"-copy\")[0] : draggableId;\n\n    // Prevent placing same habit multiple times in same slot\n    if (itemsInDest.some(id => id === habitIdPrefix || id.startsWith(`${habitIdPrefix}-copy`))) {\n      return;\n    }\n    setScheduledTasks(prev => {\n      const updated = {\n        ...prev\n      };\n\n      // Remove the dragged item from any previous slot\n      Object.keys(updated).forEach(slot => {\n        const items = Array.isArray(updated[slot]) ? updated[slot] : [updated[slot]];\n        if (items.includes(draggableId)) {\n          updated[slot] = items.filter(id => id !== draggableId);\n        }\n      });\n      const slotItems = updated[destination.droppableId] || [];\n      updated[destination.droppableId] = [...slotItems, draggableId];\n\n      // Update scheduled count\n      updateScheduledCount(draggableId, draggableId.startsWith(\"habit-\") ? \"habit\" : \"task\", \"add\");\n\n      // Update backend if it's a task\n      if (!draggableId.startsWith(\"habit-\")) {\n        fetch(`http://localhost:8080/api/tasks/${draggableId}/schedule`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n          },\n          body: JSON.stringify({\n            scheduledTime: destination.droppableId\n          })\n        }).then(res => res.json()).then(data => console.log(\"✅ Scheduled:\", data)).catch(err => console.error(\"❌ Error scheduling task:\", err));\n      }\n      return updated;\n    });\n  };\n  const isScheduled = id => {\n    return Object.values(scheduledTasks).flat().includes(String(id));\n  };\n  const cleanSchedule = async () => {\n    if (!window.confirm(\"Are you sure you want to clear the entire schedule?\")) return;\n    try {\n      // Clear task schedules on backend\n      await Promise.all(tasks.map(task => fetch(`http://localhost:8080/api/tasks/${task.id}/schedule`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify({\n          scheduledTime: null\n        })\n      })));\n      await Promise.all(tasks.map(task => fetch(`http://localhost:8080/api/tasks/${task.id}/status`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify({\n          status: \"In Progress\"\n        })\n      })));\n      setScheduledTasks({});\n      setHabitClones([]);\n      setTasks(prev => prev.map(task => ({\n        ...task,\n        scheduledTime: null,\n        status: \"In Progress\"\n      })));\n      localStorage.removeItem(\"savedSchedule\");\n      localStorage.removeItem(\"scheduledItems\");\n\n      // Also clear completions\n      localStorage.removeItem(\"taskCompletions\");\n      localStorage.removeItem(\"habitCompletions\");\n      window.dispatchEvent(new Event(\"storage-updated\")); // trigger stat refresh\n\n      alert(\"✅ Schedule has been cleared!\");\n    } catch (err) {\n      console.error(\"❌ Failed to clear schedule:\", err);\n      alert(\"Error clearing schedule. Try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container light\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-left\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83D\\uDDD3\\uFE0F Weekly Planner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-right\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowSaveModal(true),\n          className: \"logout-button\",\n          children: \"Back to Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planner-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n          className: \"task-sidebar\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"save-button-container vertical-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"save-button\",\n              onClick: saveSchedule,\n              children: \"\\uD83D\\uDCBE Save Schedule\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"save-button\",\n              onClick: handleAutoPlace,\n              children: \"\\u2728 Auto Place Habits\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"save-button\",\n              onClick: cleanSchedule,\n              children: \"\\uD83E\\uDDF9 Clean Schedule\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n            droppableId: \"taskList\",\n            children: provided => /*#__PURE__*/_jsxDEV(\"ul\", {\n              ...provided.droppableProps,\n              ref: provided.innerRef,\n              children: [tasks.map((task, index) => {\n                const scheduled = isScheduled(task.id);\n                if (scheduled) {\n                  return /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"task-item grayed-out\",\n                    children: task.title\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 474,\n                    columnNumber: 25\n                  }, this);\n                }\n                return /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: String(task.id),\n                  index: index,\n                  children: provided => /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"task-item\",\n                    ref: provided.innerRef,\n                    ...provided.draggableProps,\n                    ...provided.dragHandleProps,\n                    children: task.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 483,\n                    columnNumber: 27\n                  }, this)\n                }, task.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 481,\n                  columnNumber: 23\n                }, this);\n              }), provided.placeholder]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Habits\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n            droppableId: \"habitList\",\n            children: provided => /*#__PURE__*/_jsxDEV(\"ul\", {\n              ...provided.droppableProps,\n              ref: provided.innerRef,\n              children: [habits.map((habit, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n                draggableId: `habit-${habit.id}`,\n                index: index,\n                children: provided => /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"task-item\",\n                  ref: provided.innerRef,\n                  ...provided.draggableProps,\n                  ...provided.dragHandleProps,\n                  children: habit.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 506,\n                  columnNumber: 25\n                }, this)\n              }, habit.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 21\n              }, this)), habitClones.map((clone, index) => {\n                const habit = habits.find(h => String(h.id) === String(clone.habitId));\n                if (!habit) return null;\n              }), provided.placeholder]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"calendar-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cell hour-cell\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 528,\n              columnNumber: 15\n            }, this), days.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cell day-cell\",\n              children: day\n            }, day, false, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-body\",\n            children: hours.map(hour => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell hour-cell\",\n                children: [hour, \":00\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 536,\n                columnNumber: 19\n              }, this), days.map(day => {\n                const slotId = `${day}-${hour}:00`;\n                const scheduledItems = scheduledTasks[slotId] || [];\n                const items = Array.isArray(scheduledItems) ? scheduledItems : [scheduledItems];\n                return /*#__PURE__*/_jsxDEV(Droppable, {\n                  droppableId: slotId,\n                  children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `cell time-slot ${snapshot.isDraggingOver ? \"drag-over\" : \"\"}`,\n                    ref: provided.innerRef,\n                    ...provided.droppableProps,\n                    children: [items.map((id, i) => {\n                      if (id.startsWith(\"habit-\")) {\n                        let habit;\n                        if (id.includes(\"-copy-\") || id.includes(\"-clone-\")) {\n                          const clone = habitClones.find(cl => cl.id === id);\n                          if (!clone) return null;\n                          habit = habits.find(h => String(h.id) === String(clone.habitId));\n                        } else {\n                          const habitId = id.replace(\"habit-\", \"\");\n                          habit = habits.find(h => String(h.id) === habitId);\n                        }\n                        if (!habit) return null;\n                        return /*#__PURE__*/_jsxDEV(Draggable, {\n                          draggableId: id,\n                          index: i,\n                          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: `scheduled-task habit-task ${completedHabitIds.includes(id) ? \"done-task\" : \"\"}`,\n                            ref: provided.innerRef,\n                            ...provided.draggableProps,\n                            ...provided.dragHandleProps,\n                            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                              children: habit.title\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 573,\n                              columnNumber: 41\n                            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                              className: \"habit-icons\",\n                              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                                className: \"mark-done-btn\",\n                                onClick: e => {\n                                  e.stopPropagation();\n                                  const completions = JSON.parse(localStorage.getItem(\"habitCompletions\") || \"[]\");\n                                  updateScheduledCount(id, \"habit\", \"add\");\n                                  if (completedHabitIds.includes(id)) {\n                                    //undo\n                                    removeCompletion(\"habit\", id);\n                                    setCompletedHabitIds(prev => prev.filter(x => x !== id));\n                                  } else {\n                                    // Mark as done\n                                    const updated = [...completions, {\n                                      cloneId: id,\n                                      habitId: habit.id,\n                                      completedAt: new Date().toISOString()\n                                    }];\n                                    localStorage.setItem(\"habitCompletions\", JSON.stringify(updated));\n                                    setCompletedHabitIds(prev => [...prev, id]);\n                                    window.dispatchEvent(new Event(\"storage-updated\"));\n                                  }\n                                },\n                                children: completedHabitIds.includes(id) ? \"↩️\" : \"✅\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 575,\n                                columnNumber: 43\n                              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                                className: \"duplicate-btn\",\n                                onClick: e => {\n                                  e.stopPropagation();\n                                  const newId = `habit-${habit.id}-copy-${Date.now()}`;\n                                  const [currentDay, currentHourStr] = slotId.split(\"-\");\n                                  const currentHour = parseInt(currentHourStr.split(\":\")[0], 10);\n                                  const nearbySlots = [];\n\n                                  // Search ±1 hour on same day\n                                  for (let offset = -1; offset <= 1; offset++) {\n                                    if (offset === 0) continue;\n                                    const h = currentHour + offset;\n                                    if (h >= 6 && h <= 23) {\n                                      nearbySlots.push(`${currentDay}-${h}:00`);\n                                    }\n                                  }\n\n                                  // Search same hour on nearby days\n                                  const dayIndex = days.indexOf(currentDay);\n                                  if (dayIndex !== -1) {\n                                    if (dayIndex > 0) nearbySlots.push(`${days[dayIndex - 1]}-${currentHour}:00`);\n                                    if (dayIndex < 6) nearbySlots.push(`${days[dayIndex + 1]}-${currentHour}:00`);\n                                  }\n\n                                  // Find first available slot\n                                  const targetSlot = nearbySlots.find(slot => {\n                                    const items = scheduledTasks[slot] || [];\n                                    return !items.some(item => item === `habit-${habit.id}` || item.startsWith(`habit-${habit.id}-copy`));\n                                  });\n                                  const fallbackSlot = `${currentDay}-${Math.min(currentHour + 1, 23)}:00`; // safe upper bound\n                                  const slotToUse = targetSlot || fallbackSlot;\n                                  console.log(\"➕ Creating clone for:\", habit.title, \"→\", newId, \"in\", slotToUse); // now safe\n\n                                  // Add the clone\n                                  setHabitClones(prev => [...prev, {\n                                    id: newId,\n                                    habitId: habit.id\n                                  }]);\n                                  const scheduled = JSON.parse(localStorage.getItem(\"scheduledItems\") || \"[]\");\n                                  scheduled.push({\n                                    id: newId,\n                                    type: \"habit\",\n                                    scheduledAt: new Date().toISOString()\n                                  });\n                                  localStorage.setItem(\"scheduledItems\", JSON.stringify(scheduled));\n                                  window.dispatchEvent(new Event(\"storage-updated\"));\n\n                                  //Place the clone in the schedule\n                                  setScheduledTasks(prev => {\n                                    const updated = {\n                                      ...prev\n                                    };\n                                    if (!updated[slotToUse]) updated[slotToUse] = [];\n                                    updated[slotToUse].push(newId);\n                                    return updated;\n                                  });\n                                },\n                                children: \"\\u2795\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 601,\n                                columnNumber: 43\n                              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                                className: \"remove-btn\",\n                                onClick: e => {\n                                  e.stopPropagation();\n                                  updateScheduledCount(id, \"habit\", \"remove\");\n                                  removeCompletion(\"habit\", id);\n                                  setScheduledTasks(prev => {\n                                    const updated = {\n                                      ...prev\n                                    };\n                                    updated[slotId] = updated[slotId].filter(val => val !== id);\n                                    return updated;\n                                  });\n                                },\n                                children: \"\\u274C\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 656,\n                                columnNumber: 42\n                              }, this)]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 574,\n                              columnNumber: 41\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 567,\n                            columnNumber: 39\n                          }, this)\n                        }, `${id}-${i}`, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 565,\n                          columnNumber: 35\n                        }, this);\n                      } else {\n                        const task = tasks.find(t => String(t.id) === id);\n                        if (!task) return null;\n                        return /*#__PURE__*/_jsxDEV(Draggable, {\n                          draggableId: String(task.id),\n                          index: i,\n                          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: `scheduled-task ${task.status === \"Done\" ? \"done-task\" : \"\"}`,\n                            ref: provided.innerRef,\n                            ...provided.draggableProps,\n                            ...provided.dragHandleProps,\n                            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                              children: task.title\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 686,\n                              columnNumber: 41\n                            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                              style: {\n                                display: \"flex\",\n                                alignItems: \"center\"\n                              },\n                              children: task.status !== \"Done\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n                                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                                  className: \"mark-done-btn\",\n                                  onClick: e => {\n                                    e.stopPropagation();\n                                    updateScheduledCount(id, \"task\", \"add\");\n                                    fetch(`http://localhost:8080/api/tasks/${task.id}/status`, {\n                                      method: \"PATCH\",\n                                      headers: {\n                                        \"Content-Type\": \"application/json\",\n                                        'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                                      },\n                                      body: JSON.stringify({\n                                        status: \"Done\"\n                                      })\n                                    }).then(res => res.text()).then(() => {\n                                      task.status = \"Done\";\n                                      const completions = JSON.parse(localStorage.getItem(\"taskCompletions\") || \"[]\");\n\n                                      // Prevent duplicates (e.g. if clicking multiple times)\n                                      const alreadyRecorded = completions.some(entry => entry.taskId === task.id);\n                                      if (!alreadyRecorded) {\n                                        const updated = [...completions, {\n                                          taskId: task.id,\n                                          completedAt: new Date().toISOString()\n                                        }];\n                                        localStorage.setItem(\"taskCompletions\", JSON.stringify(updated));\n                                        window.dispatchEvent(new Event(\"storage-updated\"));\n                                      }\n                                      setScheduledTasks(prev => ({\n                                        ...prev\n                                      }));\n                                    }).catch(err => console.error(\"❌ Failed to mark done:\", err));\n                                  },\n                                  children: \"\\u2705\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 690,\n                                  columnNumber: 47\n                                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                                  className: \"remove-btn\",\n                                  onClick: e => {\n                                    e.stopPropagation();\n                                    updateScheduledCount(String(task.id), \"task\", \"remove\");\n                                    removeCompletion(\"task\", task.id);\n                                    setScheduledTasks(prev => {\n                                      const updated = {\n                                        ...prev\n                                      };\n                                      updated[slotId] = updated[slotId].filter(val => val !== String(task.id));\n                                      return updated;\n                                    });\n                                    fetch(`http://localhost:8080/api/tasks/${task.id}/schedule`, {\n                                      method: \"PUT\",\n                                      headers: {\n                                        \"Content-Type\": \"application/json\",\n                                        'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                                      },\n                                      body: JSON.stringify({\n                                        scheduledTime: null\n                                      })\n                                    }).then(res => res.json()).then(data => console.log(\"🗑️ Unschedule successful:\", data)).catch(err => console.error(\"❌ Error unscheduling task:\", err));\n                                  },\n                                  children: \"\\u274C\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 725,\n                                  columnNumber: 47\n                                }, this)]\n                              }, void 0, true)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 687,\n                              columnNumber: 41\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 680,\n                            columnNumber: 39\n                          }, this)\n                        }, `task-${task.id}-${i}`, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 678,\n                          columnNumber: 35\n                        }, this);\n                      }\n                    }), provided.placeholder]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 545,\n                    columnNumber: 27\n                  }, this)\n                }, slotId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 543,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, hour, true, {\n              fileName: _jsxFileName,\n              lineNumber: 535,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StatisticsPanel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 11\n        }, this), showSaveModal && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-overlay\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Do you want to save your schedule before going back?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 771,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"confirm-btn\",\n                onClick: () => {\n                  saveSchedule();\n                  setShowSaveModal(false);\n                  navigate(\"/dashboard\");\n                },\n                children: \"Yes, Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 773,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cancel-btn\",\n                onClick: () => {\n                  setShowSaveModal(false);\n                  navigate(\"/dashboard\");\n                },\n                children: \"No, Just Go\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 783,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 772,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 769,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 444,\n    columnNumber: 5\n  }, this);\n}\n_s(SchedulePlanner, \"BItz75oDS1OzumDoz/DNy2LPXeg=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = SchedulePlanner;\nvar _c;\n$RefreshReg$(_c, \"SchedulePlanner\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","DragDropContext","Droppable","Draggable","StatisticsPanel","jsxDEV","_jsxDEV","Fragment","_Fragment","timeBlocks","morning","afternoon","evening","getPreferredHours","preferredTime","includes","hour","parseInt","split","block","toLowerCase","removeCompletion","type","id","key","raw","localStorage","getItem","data","JSON","parse","updated","filter","entry","taskId","cloneId","setItem","stringify","window","dispatchEvent","Event","allDays","getDaysFromFrequency","freq","map","day","trim","Boolean","match","step","_","idx","autoPlaceHabits","habits","currentSchedule","tasks","setHabitClones","newSchedule","newClones","forEach","habit","frequency","candidateDays","candidateHours","placed","slotKey","alreadyHasClone","some","startsWith","Date","now","Math","random","toString","slice","push","scheduledAt","toISOString","habitId","prev","syncScheduleFromTasks","task","scheduledTime","String","mergeScheduledTasks","savedSchedule","updatedTasks","updatedSchedule","merged","updatedTaskIds","t","Object","keys","slot","length","entries","ids","updateScheduledCount","action","stored","alreadyExists","item","SchedulePlanner","_s","_location$state","_location$state2","location","navigate","setTasks","state","setHabits","scheduledTasks","setScheduledTasks","habitClones","showSaveModal","setShowSaveModal","completedHabitIds","setCompletedHabitIds","saveSchedule","scheduleData","console","log","alert","handleAutoPlace","hourStart","setHourStart","hourEnd","setHourEnd","hours","Array","from","i","days","document","documentElement","style","setProperty","userId","token","fetch","headers","then","res","json","userData","_location$state4","taskDetails","Promise","all","taskIds","habitDetails","habitIds","saved","_location$state3","parsed","fallbackSchedule","catch","err","error","onDragEnd","result","destination","source","draggableId","droppableId","replace","substring","slotItems","scheduled","itemsInDest","habitIdPrefix","items","isArray","method","body","isScheduled","values","flat","cleanSchedule","confirm","status","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","provided","droppableProps","ref","innerRef","index","title","draggableProps","dragHandleProps","placeholder","clone","find","h","slotId","scheduledItems","snapshot","isDraggingOver","cl","e","stopPropagation","completions","x","completedAt","newId","currentDay","currentHourStr","currentHour","nearbySlots","offset","dayIndex","indexOf","targetSlot","fallbackSlot","min","slotToUse","val","display","alignItems","text","alreadyRecorded","_c","$RefreshReg$"],"sources":["C:/Users/rache/react-projects/smart-task-and-habit-tracker/frontend/src/components/Schedule/SchedulePlanner.js"],"sourcesContent":["// SchedulePlanner.js\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport {\n  DragDropContext,\n  Droppable,\n  Draggable,\n} from \"@hello-pangea/dnd\";\nimport \"./SchedulePlanner.css\";\nimport \"../Dashboard.css\";\nimport StatisticsPanel from \"./StatisticsPanel\";\n\n\nconst timeBlocks = {\n  morning: [6, 7, 8, 9, 10, 11],\n  afternoon: [12, 13, 14, 15, 16, 17],\n  evening: [18, 19, 20, 21, 22, 23],\n};\n\nfunction getPreferredHours(preferredTime) {\n  if (!preferredTime) return [];\n  if (preferredTime.includes(\":\")) {\n    const hour = parseInt(preferredTime.split(\":\")[0], 10);\n    return [hour];\n  }\n  const block = timeBlocks[preferredTime.toLowerCase()];\n  return block || [];\n}\n\nfunction removeCompletion(type, id) {\n  const key = type === \"task\" ? \"taskCompletions\" : \"habitCompletions\";\n  const raw = localStorage.getItem(key);\n  if (!raw) return;\n  const data = JSON.parse(raw);\n  const updated = data.filter((entry) => {\n    if (type === \"task\") return entry.taskId !== id;\n    else return entry.cloneId !== id;\n  });\n  localStorage.setItem(key, JSON.stringify(updated));\n  window.dispatchEvent(new Event(\"storage-updated\"));\n}\n\nconst allDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nfunction getDaysFromFrequency(freq) {\n  if (!freq) return [];\n  if (freq === \"Daily\") return allDays;\n  if (freq.includes(\",\")) {\n    return freq.split(\",\").map(day => {\n      switch (day.trim().toLowerCase()) {\n        case \"mon\": return \"Monday\";\n        case \"tue\": return \"Tuesday\";\n        case \"wed\": return \"Wednesday\";\n        case \"thu\": return \"Thursday\";\n        case \"fri\": return \"Friday\";\n        case \"sat\": return \"Saturday\";\n        case \"sun\": return \"Sunday\";\n        default: return null;\n      }\n    }).filter(Boolean);\n  }\n  const match = freq.match(/Every (\\d+) days/);\n  if (match) {\n    const step = parseInt(match[1], 10);\n    return allDays.filter((_, idx) => idx % step === 0);\n  }\n  return [];\n}\n\nfunction autoPlaceHabits(habits, currentSchedule, tasks, setHabitClones) {\n  const newSchedule = { ...currentSchedule };\n  const newClones = [];\n\n  habits.forEach(habit => {\n    if (!habit.frequency || !habit.preferredTime) return;\n\n    const candidateDays = getDaysFromFrequency(habit.frequency);\n    const candidateHours = getPreferredHours(habit.preferredTime);\n\n    candidateDays.forEach(day => {\n      let placed = false;\n      for (const hour of candidateHours) {\n        if (placed) break;\n        const slotKey = `${day}-${hour}:00`;\n\n        const alreadyHasClone = (newSchedule[slotKey] || []).some(id =>\n          id.startsWith(`habit-${habit.id}-clone`)\n        );\n\n        if (!alreadyHasClone) {\n          const cloneId = `habit-${habit.id}-clone-${Date.now()}-${Math.random().toString(36).slice(2)}`;\n          if (!newSchedule[slotKey]) newSchedule[slotKey] = [];\n          newSchedule[slotKey].push(cloneId);\n          localStorage.setItem(\"scheduledItems\", JSON.stringify([\n            ...JSON.parse(localStorage.getItem(\"scheduledItems\") || \"[]\"),\n            { id: cloneId, type: \"habit\", scheduledAt: new Date().toISOString() }\n          ]));\n          window.dispatchEvent(new Event(\"storage-updated\"));\n          newClones.push({ id: cloneId, habitId: habit.id });\n          placed = true;\n        }\n      }\n    });\n  });\n\n  setHabitClones(prev => [...prev, ...newClones]);\n  return newSchedule;\n}\n\nfunction syncScheduleFromTasks(tasks) {\n  const newSchedule = {};\n  tasks.forEach(task => {\n    if (task.scheduledTime) {\n      if (!newSchedule[task.scheduledTime]) newSchedule[task.scheduledTime] = [];\n      newSchedule[task.scheduledTime].push(String(task.id));\n    }\n  });\n  return newSchedule;\n}\n\nfunction mergeScheduledTasks(savedSchedule, updatedTasks) {\n  const updatedSchedule = syncScheduleFromTasks(updatedTasks);\n\n  const merged = { ...savedSchedule };\n\n  // Remove any task IDs from the old schedule if they were updated\n  const updatedTaskIds = updatedTasks\n    .filter(t => t.scheduledTime)\n    .map(t => String(t.id));\n\n  // Remove any outdated placements of updated tasks\n  Object.keys(merged).forEach(slot => {\n    merged[slot] = merged[slot].filter(id => !updatedTaskIds.includes(id));\n    if (merged[slot].length === 0) {\n      delete merged[slot];\n    }\n  });\n\n  // Now apply the fresh placements from updated tasks\n  Object.entries(updatedSchedule).forEach(([slot, ids]) => {\n    if (!merged[slot]) merged[slot] = [];\n    merged[slot].push(...ids);\n  });\n\n  return merged;\n}\n\nfunction updateScheduledCount(id, type, action) {\n  const key = \"scheduledItems\";\n  const stored = JSON.parse(localStorage.getItem(key) || \"[]\");\n\n  let updated;\n  if (action === \"add\") {\n    const alreadyExists = stored.some(entry => entry.id === id);\n    if (!alreadyExists) {\n      updated = [...stored, { id, type, scheduledAt: new Date().toISOString() }];\n    } else {\n      updated = stored; // no change\n    }\n  } else if (action === \"remove\") {\n    updated = stored.filter(item => item.id !== id);\n  }\n\n  localStorage.setItem(key, JSON.stringify(updated));\n  window.dispatchEvent(new Event(\"storage-updated\")); // Trigger stats refresh\n}\n\nexport default function SchedulePlanner() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [tasks, setTasks] = useState(location.state?.tasks || []);\n  const [habits, setHabits] = useState(location.state?.habits || []);\n  const [scheduledTasks, setScheduledTasks] = useState({});\n  const [habitClones, setHabitClones] = useState([]); // [{ id: 'habit-1-copy-1', habitId: 1 }]\n  const [showSaveModal, setShowSaveModal] = useState(false);\n  \n  const [completedHabitIds, setCompletedHabitIds] = useState(() => {\n    const stored = JSON.parse(localStorage.getItem(\"habitCompletions\") || \"[]\");\n    return stored.map(entry => entry.cloneId); // Use cloneId, not habitId\n  });\n  \n  const saveSchedule = () => {\n    const scheduleData = {\n      scheduledTasks,\n      habitClones,\n    };\n    console.log(\"📦 Saving schedule:\", scheduleData);\n    localStorage.setItem(\"savedSchedule\", JSON.stringify(scheduleData));\n    alert(\"✅ Schedule saved locally!\");\n  };\n\n  const handleAutoPlace = () => {\n    const updatedSchedule = autoPlaceHabits(habits, scheduledTasks, tasks, setHabitClones);\n    setScheduledTasks(updatedSchedule);\n  };\n\n  const [hourStart, setHourStart] = useState(() => {\n    return parseInt(localStorage.getItem(\"startHour\")) || 6;\n  });\n\n  const [hourEnd, setHourEnd] = useState(() => {\n    return parseInt(localStorage.getItem(\"endHour\")) || 22;\n  });\n\n  const hours = Array.from({ length: hourEnd - hourStart + 1 }, (_, i) => i + hourStart);\n  const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n  useEffect(() => {\n    document.documentElement.style.setProperty('--row-count', hourEnd - hourStart + 1);\n  }, [hourStart, hourEnd]);\n\n  useEffect(() => {\n    const userId = localStorage.getItem(\"userId\");\n    \n    if (!userId) return;\n\n    const token = localStorage.getItem(\"token\");\n    fetch(`http://localhost:8080/api/users/${userId}` ,{\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    })\n      .then(res => res.json())\n      .then(async (userData) => {\n        const taskDetails = await Promise.all(\n          (userData.taskIds || []).map(id =>\n            fetch(`http://localhost:8080/api/tasks/${id}`, {\n              headers: {\n                'Authorization': `Bearer ${token}`,\n              },\n            }).then(res => res.json())\n          )\n        );\n        setTasks(taskDetails);\n        setScheduledTasks(syncScheduleFromTasks(taskDetails));\n\n        const habitDetails = await Promise.all(\n          (userData.habitIds || []).map(id =>\n            fetch(`http://localhost:8080/api/habits/${id}`, {\n              headers: {\n                'Authorization': `Bearer ${token}`,\n              },\n            }).then(res => res.json())\n          )\n        );\n        setHabits(habitDetails);\n\n        const saved = localStorage.getItem(\"savedSchedule\");\n        if (saved) {\n          const parsed = JSON.parse(saved);\n          \n          // If tasks exist in location.state, merge them with saved schedule\n          if (location.state?.tasks) {\n            const merged = mergeScheduledTasks(parsed.scheduledTasks || {}, location.state.tasks);\n            setScheduledTasks(merged);\n          } else {\n            // Use saved schedule as-is\n            setScheduledTasks(parsed.scheduledTasks || {});\n          }\n\n          if (parsed.habitClones) {\n            setHabitClones(parsed.habitClones);\n          }\n      } else if (location.state?.tasks) {\n        setScheduledTasks(syncScheduleFromTasks(location.state.tasks));\n      } else {\n        // fallback: construct schedule from taskDetails\n        const fallbackSchedule = syncScheduleFromTasks(taskDetails);\n        setScheduledTasks(fallbackSchedule);\n      }\n    })\n    .catch(err => console.error(\"Failed to load tasks and habits:\", err));\n}, []);\n\n  // const onDragEnd = (result) => {\n  //   const { destination, draggableId } = result;\n  //   if (!destination) return;\n\n  //   const itemsInDest = scheduledTasks[destination.droppableId] || [];\n  //   const habitIdPrefix = draggableId.startsWith(\"habit-\") ? draggableId.split(\"-copy\")[0] : draggableId;\n    \n  //   if (itemsInDest.some(id => id === habitIdPrefix || id.startsWith(`${habitIdPrefix}-copy`))) {\n  //     // Block duplicate placement\n  //     return;\n  //   }\n  //   setScheduledTasks((prev) => {\n  //     const updated = { ...prev };\n\n  //     // Remove the dragged item from any previous slot\n  //     Object.keys(updated).forEach((slot) => {\n  //       const items = Array.isArray(updated[slot]) ? updated[slot] : [updated[slot]];\n  //       if (items.includes(draggableId)) {\n  //         updated[slot] = items.filter((id) => id !== draggableId);\n  //       }\n  //     });\n\n  //     const slotItems = updated[destination.droppableId] || [];\n  //     const currentValues = Array.isArray(slotItems) ? slotItems : [slotItems];\n  //     updated[destination.droppableId] = [...currentValues, draggableId];\n  //     updateScheduledCount(draggableId, draggableId.startsWith(\"habit-\") ? \"habit\" : \"task\", \"add\");\n\n  //     if (!draggableId.startsWith(\"habit-\")) {\n  //       fetch(`http://localhost:8080/api/tasks/${draggableId}/schedule`, {\n  //         method: \"PUT\",\n  //         headers: {\n  //           \"Content-Type\": \"application/json\",\n  //           \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n  //         },\n  //         body: JSON.stringify({ scheduledTime: destination.droppableId }),\n  //       })\n  //         .then((res) => res.json())\n  //         .then((data) => console.log(\"✅ Scheduled:\", data))\n  //         .catch((err) => console.error(\"❌ Error scheduling task:\", err));\n  //     }\n\n  //     return updated;\n  //   });\n  // };\n\n  const onDragEnd = (result) => {\n    const { destination, source, draggableId } = result;\n    if (!destination) return;\n\n    // 💡 Dragging a habit from the sidebar (original list)\n    if (source.droppableId === \"habitList\" && draggableId.startsWith(\"habit-\")) {\n      const habitId = draggableId.replace(\"habit-\", \"\");\n      const cloneId = `habit-${habitId}-clone-${Date.now()}-${Math.random().toString(36).substring(2)}`;\n\n      // Add to habit clones\n      setHabitClones((prev) => [...prev, { id: cloneId, habitId }]);\n\n      // Add to schedule\n      setScheduledTasks((prev) => {\n        const updated = { ...prev };\n        const slotItems = updated[destination.droppableId] || [];\n        updated[destination.droppableId] = [...slotItems, cloneId];\n        return updated;\n      });\n\n      // Update localStorage\n      const scheduled = JSON.parse(localStorage.getItem(\"scheduledItems\") || \"[]\");\n      scheduled.push({ id: cloneId, type: \"habit\", scheduledAt: new Date().toISOString() });\n      localStorage.setItem(\"scheduledItems\", JSON.stringify(scheduled));\n      window.dispatchEvent(new Event(\"storage-updated\"));\n      return;\n    }\n\n    // 💡 Regular task or already-scheduled clone/habit move\n    const itemsInDest = scheduledTasks[destination.droppableId] || [];\n    const habitIdPrefix = draggableId.startsWith(\"habit-\") ? draggableId.split(\"-copy\")[0] : draggableId;\n\n    // Prevent placing same habit multiple times in same slot\n    if (itemsInDest.some(id => id === habitIdPrefix || id.startsWith(`${habitIdPrefix}-copy`))) {\n      return;\n    }\n\n    setScheduledTasks((prev) => {\n      const updated = { ...prev };\n\n      // Remove the dragged item from any previous slot\n      Object.keys(updated).forEach((slot) => {\n        const items = Array.isArray(updated[slot]) ? updated[slot] : [updated[slot]];\n        if (items.includes(draggableId)) {\n          updated[slot] = items.filter((id) => id !== draggableId);\n        }\n      });\n\n      const slotItems = updated[destination.droppableId] || [];\n      updated[destination.droppableId] = [...slotItems, draggableId];\n\n      // Update scheduled count\n      updateScheduledCount(draggableId, draggableId.startsWith(\"habit-\") ? \"habit\" : \"task\", \"add\");\n\n      // Update backend if it's a task\n      if (!draggableId.startsWith(\"habit-\")) {\n        fetch(`http://localhost:8080/api/tasks/${draggableId}/schedule`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n          body: JSON.stringify({ scheduledTime: destination.droppableId }),\n        })\n          .then((res) => res.json())\n          .then((data) => console.log(\"✅ Scheduled:\", data))\n          .catch((err) => console.error(\"❌ Error scheduling task:\", err));\n      }\n\n      return updated;\n    });\n  };\n\n  const isScheduled = (id) => {\n    return Object.values(scheduledTasks).flat().includes(String(id))\n  };\n\n  const cleanSchedule = async () => {\n  if (!window.confirm(\"Are you sure you want to clear the entire schedule?\")) return;\n\n  try {\n    // Clear task schedules on backend\n    await Promise.all(\n      tasks.map(task =>\n        fetch(`http://localhost:8080/api/tasks/${task.id}/schedule`, {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\",\n                      'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n          },\n          body: JSON.stringify({ scheduledTime: null })\n        })\n      )\n    );\n\n    await Promise.all(\n    tasks.map(task =>\n      fetch(`http://localhost:8080/api/tasks/${task.id}/status`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\",\n                  'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n         },\n        body: JSON.stringify({ status: \"In Progress\" })\n      })\n    )\n  );\n\n    setScheduledTasks({});\n    setHabitClones([]);\n    setTasks(prev => prev.map(task => ({ ...task, scheduledTime: null, status: \"In Progress\" })));\n    localStorage.removeItem(\"savedSchedule\");\n    localStorage.removeItem(\"scheduledItems\");\n\n    // Also clear completions\n    localStorage.removeItem(\"taskCompletions\");\n    localStorage.removeItem(\"habitCompletions\");\n    window.dispatchEvent(new Event(\"storage-updated\")); // trigger stat refresh\n\n    alert(\"✅ Schedule has been cleared!\");\n  } catch (err) {\n    console.error(\"❌ Failed to clear schedule:\", err);\n    alert(\"Error clearing schedule. Try again.\");\n  }\n};\n\n  return (\n    <div className=\"dashboard-container light\">\n      <header className=\"dashboard-header\">\n        <div className=\"header-left\"><h2>🗓️ Weekly Planner</h2></div>\n        <div className=\"header-right\">\n          <button\n            onClick={() => setShowSaveModal(true)}\n            className=\"logout-button\"\n          >\n            Back to Dashboard\n          </button>\n        </div>\n      </header>\n\n      <DragDropContext onDragEnd={onDragEnd}>\n        <div className=\"planner-container\">\n          <aside className=\"task-sidebar\">\n            <div className=\"save-button-container vertical-buttons\">\n              <button className=\"save-button\" onClick={saveSchedule}>💾 Save Schedule</button>\n              <button className=\"save-button\" onClick={handleAutoPlace}>✨ Auto Place Habits</button>\n              <button className=\"save-button\" onClick={cleanSchedule}>🧹 Clean Schedule</button>\n            </div>\n            <h3>Tasks</h3>\n            <Droppable droppableId=\"taskList\">\n              {(provided) => (\n                <ul {...provided.droppableProps} ref={provided.innerRef}>\n                  {tasks.map((task, index) => {\n                    const scheduled = isScheduled(task.id);\n\n                    if (scheduled) {\n                      return (\n                        <li key={task.id} className=\"task-item grayed-out\">\n                          {task.title}\n                        </li>\n                      );\n                    }\n\n                    return (\n                      <Draggable draggableId={String(task.id)} index={index} key={task.id}>\n                        {(provided) => (\n                          <li\n                            className=\"task-item\"\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                          >\n                            {task.title}\n                          </li>\n                        )}\n                      </Draggable>\n                    );\n                  })}\n                  {provided.placeholder}\n                </ul>\n              )}\n            </Droppable>\n            <h3>Habits</h3>\n            <Droppable droppableId=\"habitList\">\n              {(provided) => (\n                <ul {...provided.droppableProps} ref={provided.innerRef}>\n                  {habits.map((habit, index) => (\n                    <Draggable draggableId={`habit-${habit.id}`} index={index} key={habit.id}>\n                      {(provided) => (\n                        <li\n                          className=\"task-item\"\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                        >\n                          {habit.title}\n                        </li>\n                      )}\n                    </Draggable>\n                  ))}\n                  {habitClones.map((clone, index) => {\n                    const habit = habits.find(h => String(h.id) === String(clone.habitId));\n                    if (!habit) return null;\n                  })}\n                  {provided.placeholder}\n                </ul>\n              )}\n            </Droppable>\n          </aside>\n          <main className=\"calendar-grid\">\n            <div className=\"grid-header\">\n              <div className=\"cell hour-cell\"></div>\n              {days.map((day) => (\n                <div key={day} className=\"cell day-cell\">{day}</div>\n              ))}\n            </div>\n            <div className=\"grid-body\">\n              {hours.map((hour) => (\n                <div className=\"row\" key={hour}>\n                  <div className=\"cell hour-cell\">{hour}:00</div>\n                  {days.map((day) => {\n                    const slotId = `${day}-${hour}:00`;\n                    const scheduledItems = scheduledTasks[slotId] || [];\n                    const items = Array.isArray(scheduledItems) ? scheduledItems : [scheduledItems];\n\n                    return (\n                      <Droppable droppableId={slotId} key={slotId}>\n                        {(provided, snapshot) => (\n                          <div\n                            className={`cell time-slot ${snapshot.isDraggingOver ? \"drag-over\" : \"\"}`}\n                            ref={provided.innerRef}\n                            {...provided.droppableProps}\n                          >\n                            {items.map((id, i) => {\n                              if (id.startsWith(\"habit-\")) {\n                                let habit;\n                                if (id.includes(\"-copy-\") || id.includes(\"-clone-\")) {\n                                  const clone = habitClones.find(cl => cl.id === id);\n                                  if (!clone) return null;\n                                  habit = habits.find(h => String(h.id) === String(clone.habitId));\n                                } else {\n                                  const habitId = id.replace(\"habit-\", \"\");\n                                  habit = habits.find(h => String(h.id) === habitId);\n                                }\n\n                                if (!habit) return null;\n\n                                return (\n                                  <Draggable draggableId={id} index={i} key={`${id}-${i}`}>\n                                    {(provided) => (\n                                      <div\n                                        className={`scheduled-task habit-task ${completedHabitIds.includes(id) ? \"done-task\" : \"\"}`}\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                      >\n                                        <span>{habit.title}</span>\n                                        <div className=\"habit-icons\">\n                                          <button\n                                            className=\"mark-done-btn\"\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n\n                                              const completions = JSON.parse(localStorage.getItem(\"habitCompletions\") || \"[]\");\n                                              updateScheduledCount(id, \"habit\", \"add\");\n                                              if (completedHabitIds.includes(id)) {\n                                                //undo\n                                                removeCompletion(\"habit\", id);\n                                                setCompletedHabitIds(prev => prev.filter(x => x !== id));\n                                              } else {\n                                                // Mark as done\n                                                const updated = [...completions, {\n                                                  cloneId: id,\n                                                  habitId: habit.id,\n                                                  completedAt: new Date().toISOString()\n                                                }];\n                                                localStorage.setItem(\"habitCompletions\", JSON.stringify(updated));\n                                                setCompletedHabitIds(prev => [...prev, id]);\n                                                window.dispatchEvent(new Event(\"storage-updated\"));\n                                              }\n                                            }}\n                                          >\n                                            {completedHabitIds.includes(id) ? \"↩️\" : \"✅\"}\n                                          </button>\n                                          <button\n                                            className=\"duplicate-btn\"\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n\n                                              const newId = `habit-${habit.id}-copy-${Date.now()}`;\n                                              const [currentDay, currentHourStr] = slotId.split(\"-\");\n                                              const currentHour = parseInt(currentHourStr.split(\":\")[0], 10);\n                                              const nearbySlots = [];\n\n                                              // Search ±1 hour on same day\n                                              for (let offset = -1; offset <= 1; offset++) {\n                                                if (offset === 0) continue;\n                                                const h = currentHour + offset;\n                                                if (h >= 6 && h <= 23) {\n                                                  nearbySlots.push(`${currentDay}-${h}:00`);\n                                                }\n                                              }\n\n                                              // Search same hour on nearby days\n                                              const dayIndex = days.indexOf(currentDay);\n                                              if (dayIndex !== -1) {\n                                                if (dayIndex > 0) nearbySlots.push(`${days[dayIndex - 1]}-${currentHour}:00`);\n                                                if (dayIndex < 6) nearbySlots.push(`${days[dayIndex + 1]}-${currentHour}:00`);\n                                              }\n\n                                              // Find first available slot\n                                              const targetSlot = nearbySlots.find(slot => {\n                                                const items = scheduledTasks[slot] || [];\n                                                return !items.some(item =>\n                                                  item === `habit-${habit.id}` || item.startsWith(`habit-${habit.id}-copy`)\n                                                );\n                                              });\n\n                                              const fallbackSlot = `${currentDay}-${Math.min(currentHour + 1, 23)}:00`; // safe upper bound\n                                              const slotToUse = targetSlot || fallbackSlot;\n\n                                              console.log(\"➕ Creating clone for:\", habit.title, \"→\", newId, \"in\", slotToUse); // now safe\n\n                                              // Add the clone\n                                              setHabitClones((prev) => [...prev, { id: newId, habitId: habit.id }]);\n                                              const scheduled = JSON.parse(localStorage.getItem(\"scheduledItems\") || \"[]\");\n                                              scheduled.push({ id: newId, type: \"habit\", scheduledAt: new Date().toISOString() });\n                                              localStorage.setItem(\"scheduledItems\", JSON.stringify(scheduled));\n                                              window.dispatchEvent(new Event(\"storage-updated\"));\n\n                                              //Place the clone in the schedule\n                                              setScheduledTasks((prev) => {\n                                                const updated = { ...prev };\n                                                if (!updated[slotToUse]) updated[slotToUse] = [];\n                                                updated[slotToUse].push(newId);\n                                                return updated;\n                                              });\n                                            }}\n                                          >➕</button>\n                                         <button\n                                            className=\"remove-btn\"\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n                                              updateScheduledCount(id, \"habit\", \"remove\");\n                                              removeCompletion(\"habit\", id);\n                                              setScheduledTasks((prev) => {\n                                                const updated = { ...prev };\n                                                updated[slotId] = updated[slotId].filter(val => val !== id);\n                                                return updated;\n                                              });\n                                            }}\n                                          >❌</button>\n                                        </div>\n                                      </div>\n                                    )}\n                                  </Draggable>\n                                );\n                              } else {\n                                const task = tasks.find(t => String(t.id) === id);\n                                if (!task) return null;\n                                return (\n                                  <Draggable draggableId={String(task.id)} index={i} key={`task-${task.id}-${i}`}>\n                                    {(provided) => (\n                                      <div\n                                        className={`scheduled-task ${task.status === \"Done\" ? \"done-task\" : \"\"}`}\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                      >\n                                        <span>{task.title}</span>\n                                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                                          {task.status !== \"Done\" && (\n                                            <>\n                                              <button\n                                                className=\"mark-done-btn\"\n                                                onClick={(e) => {\n                                                  e.stopPropagation();\n                                                  updateScheduledCount(id, \"task\", \"add\");\n                                                  fetch(`http://localhost:8080/api/tasks/${task.id}/status`, {\n                                                    method: \"PATCH\",\n                                                    headers: { \"Content-Type\": \"application/json\" ,\n                                                              'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                                                    },\n                                                    body: JSON.stringify({ status: \"Done\" }),\n                                                  })\n                                                    .then((res) => res.text())\n                                                    .then(() => {\n                                                      task.status = \"Done\";\n                                                      const completions = JSON.parse(localStorage.getItem(\"taskCompletions\") || \"[]\");\n\n                                                      // Prevent duplicates (e.g. if clicking multiple times)\n                                                      const alreadyRecorded = completions.some(entry => entry.taskId === task.id);\n                                                      if (!alreadyRecorded) {\n                                                        const updated = [\n                                                          ...completions,\n                                                          {\n                                                            taskId: task.id,\n                                                            completedAt: new Date().toISOString(),\n                                                          },\n                                                        ];\n                                                        localStorage.setItem(\"taskCompletions\", JSON.stringify(updated));\n                                                        window.dispatchEvent(new Event(\"storage-updated\"));\n                                                      }\n                                                      setScheduledTasks((prev) => ({ ...prev }));\n                                                    })\n                                                    .catch((err) => console.error(\"❌ Failed to mark done:\", err));\n                                                }}\n                                              >✅</button>\n                                              <button\n                                                className=\"remove-btn\"\n                                                onClick={(e) => {\n                                                  e.stopPropagation();\n                                                  updateScheduledCount(String(task.id), \"task\", \"remove\");\n                                                  removeCompletion(\"task\", task.id);\n                                                  setScheduledTasks((prev) => {\n                                                    const updated = { ...prev };\n                                                    updated[slotId] = updated[slotId].filter(val => val !== String(task.id));\n                                                    return updated;\n                                                  });\n                                                  fetch(`http://localhost:8080/api/tasks/${task.id}/schedule`, {\n                                                    method: \"PUT\",\n                                                    headers: { \"Content-Type\": \"application/json\" ,\n                                                              'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n                                                    },\n                                                    body: JSON.stringify({ scheduledTime: null }),\n                                                  })\n                                                    .then((res) => res.json())\n                                                    .then((data) => console.log(\"🗑️ Unschedule successful:\", data))\n                                                    .catch((err) => console.error(\"❌ Error unscheduling task:\", err));\n                                                }}\n                                              >❌</button>\n                                            </>\n                                          )}\n                                        </div>\n                                      </div>\n                                    )}\n                                  </Draggable>\n                                );\n                              }\n                            })}\n                            {provided.placeholder}\n                          </div>\n                        )}\n                      </Droppable>\n                    );\n                  })}\n                </div>\n              ))}\n            </div>\n          </main>\n          <StatisticsPanel />\n          {showSaveModal && (\n            <div className=\"modal-overlay\">\n              <div className=\"modal-content\">\n                <p>Do you want to save your schedule before going back?</p>\n                <div className=\"modal-buttons\">\n                  <button\n                    className=\"confirm-btn\"\n                    onClick={() => {\n                      saveSchedule();\n                      setShowSaveModal(false);\n                      navigate(\"/dashboard\");\n                    }}\n                  >\n                    Yes, Save\n                  </button>\n                  <button\n                    className=\"cancel-btn\"\n                    onClick={() => {\n                      setShowSaveModal(false);\n                      navigate(\"/dashboard\");\n                    }}\n                  >\n                    No, Just Go\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </DragDropContext>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}